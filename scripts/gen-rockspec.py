#!/usr/bin/env python3
# Generate a .rockspec from the .rockspec in the root directory
from datetime import date
from string import Template
import re
import os
import sys
import argparse
from pathlib import Path

ROOT = Path(__file__).resolve().parent.parent
ROCKSPEC_TEMPLATE = ROOT / "kong-plugin-ddtrace.rockspec"

# Rockspec format 1.0
VERSION_FORMAT = r"[\w.]+-[\d]+"


def main() -> int:
    parser = argparse.ArgumentParser(description="TODO")
    parser.add_argument("--version", required=True)
    parser.add_argument("--tag", required=True)
    parser.add_argument("--output")

    args = parser.parse_args()

    if not os.path.exists(ROCKSPEC_TEMPLATE):
        print(f"Missing template rockspec {ROCKSPEC_TEMPLATE}")
        sys.exit(1)

    revision = "1"
    rockspec_version = f"{args.version}-{revision}"
    if not re.match(VERSION_FORMAT, rockspec_version):
        print(
            f"{rockspec_version} does not follow Rockspec version format: {VERSION_FORMAT}"
        )
        sys.exit(1)

    rockspec = Path(ROCKSPEC_TEMPLATE)
    final_rockspec = ROOT / f"{rockspec.stem}-{rockspec_version}.rockspec"

    vars = {
        "tag": args.tag,
        "version": args.version,
        "revision": revision,
    }

    with open(final_rockspec, "w") as fw:
        today = date.today()
        result = f"-- This file was generated by scripts/gen_rockspec.py on {today}\n"
        with open(ROCKSPEC_TEMPLATE, "r") as fr:
            src = Template(fr.read())
            result += src.substitute(vars)
        fw.write(result)

    print(final_rockspec)

    return 0


if __name__ == "__main__":
    sys.exit(main())
