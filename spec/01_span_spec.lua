local new_span = require "kong.plugins.ddtrace.span".new

describe("span", function()
    local start_time = 1700000000000000000LL
    local duration = 100000000LL
    it("starts a new span", function()
        -- new span without trace id, parent, span id, or sampling priority
        local span = new_span("test_service", "test_name", "test_resource", nil, nil, nil, start_time, nil)
        span:finish(start_time + duration)
        assert.same(span.service, "test_service")
        assert.same(span.name, "test_name")
        assert.same(span.resource, "test_resource")
        assert.is_not.equal(span.trace_id, nil)
        assert.is_not.equal(span.span_id, nil)
        assert.equal(span.start, start_time)
        assert.equal(span.duration, duration)
    end)
    it("starts a new span for an existing trace", function()
        local trace_id = 12345678901234567890ULL
        local parent_id = 9876543210987654321ULL
        local span = new_span("test_service", "test_name", "test_resource", trace_id, nil, parent_id, start_time, nil)
        span:finish(start_time + duration)
        assert.same(span.service, "test_service")
        assert.same(span.name, "test_name")
        assert.same(span.resource, "test_resource")
        assert.equal(span.trace_id, trace_id)
        assert.equal(span.parent_id, parent_id)
        assert.is_not.equal(span.span_id, nil)
        assert.equal(span.start, start_time)
        assert.equal(span.duration, duration)
    end)
    it("starts a child span", function()
        -- new span without trace id, parent, span id, or sampling priority
        local span = new_span("test_service", "test_name", "test_resource", nil, nil, nil, start_time, nil)
        local child_start_time = start_time + 50000000LL
        local child_duration = 20000000LL
        local child_span = span:new_child("child_name", "child_resource", child_start_time)
        child_span:finish(child_start_time + child_duration)
        span:finish(start_time + duration)
        assert.same(span.service, child_span.service)
        assert.same(child_span.name, "child_name")
        assert.same(child_span.resource, "child_resource")
        assert.equal(span.trace_id, child_span.trace_id)
        assert.is_not.equal(span.span_id, child_span.span_id)
        assert.equal(child_span.start, child_start_time)
        assert.equal(child_span.duration, child_duration)
    end)
    it("sets tags", function()
        local span = new_span("test_service", "test_name", "test_resource", nil, nil, nil, start_time, nil)
        span:set_tag("string", "value")
        span:set_tag("number", 42)
        span:set_tag("boolean", true)
        span:set_tag("nil", "value that will be deleted in next set_tag")
        span:set_tag("nil", nil)
        span:finish(start_time + duration)
        assert.same(span.meta["string"], "value")
        assert.same(span.meta["number"], "42")
        assert.same(span.meta["boolean"], "true")
        assert.is_nil(span.meta["nil"])
    end)
end)
